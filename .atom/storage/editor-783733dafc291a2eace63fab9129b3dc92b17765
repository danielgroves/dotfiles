{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":774},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/danielsgroves/Projects/so_client_orig","buffers":[{"text":"import pytest\n\nfrom statistic_model import StatisticModel\nfrom settings_model import SettingsModel\n\nclass TestClass:\n    @classmethod\n    def setup_class(self):\n        # Create tests settings\n        self.settings = SettingsModel()\n        self.settings.update_freqency = 30\n        self.settings.disabled_types = []\n\n        self.settings.request_url = \"172.28.128.2\"\n        self.settings.request_port = \"8080\"\n        self.settings.request_location = \"log_api/\"\n\n        self.settings.generate_uuid()\n\n        self.authentication_token = \"6e29b97b910dcaf97ef1bf4b6389f131316bbd5d\"\n\n    def populate_disabled_types(self):\n        self.settings.disabled_types.append({'api_name': 'cpu', 'type_name': 'CPU'})\n        self.settings.disabled_types.append({'api_name': 'memory', 'type_name': 'Memory'})\n        self.settings.disabled_types.append({'api_name': 'disk_usage', 'type_name': 'Disk Usage'})\n        self.settings.disabled_types.append({'api_name': 'network_ip', 'type_name': 'Network IP'})\n        self.settings.disabled_types.append({'api_name': 'network_io', 'type_name': 'Network I/O'})\n\n    def empty_disabled_types(self):\n        self.settings.disabled_types = []\n\n    def test_disabled_statistics(self):\n        self.populate_disabled_types()\n        stats = StatisticModel(self.settings)\n\n        assert stats.cpu == None\n        assert stats.memory == None\n        assert stats.disk_usage == None\n        assert stats.network_ip == None\n        assert stats.network_io == None\n\n    def test_enabled_types(self):\n        self.empty_disabled_types()\n        stats = StatisticModel(self.settings)\n\n        assert stats.cpu != None\n        assert stats.memory != None\n        assert stats.disk_usage != None\n        assert stats.network_ip != None\n        assert stats.network_io != None\n\n    def test_get_cpu(self):\n        stats = StatisticModel(self.settings)\n        assert isinstance(stats.get_cpu(), list)\n\n    def test_get_memory(self):\n        stats = StatisticModel(self.settings)\n        assert isinstance(stats.get_memory(), dict)\n\n    def test_get_disk_usage(self):\n        stats = StatisticModel(self.settings)\n        assert isinstance(stats.get_disk_usage(), list)\n\n    def test_get_network_ip(self):\n        stats = StatisticModel(self.settings)\n        assert isinstance(stats.get_network_ip(), list)\n\n    def test_get_network_io(self):\n        stats = StatisticModel(self.settings)\n        assert isinstance(stats.get_network_io(), dict)\n\n    def test_set_uuid(self):\n        stats = StatisticModel(self.settings)\n        assert isinstance(stats.server_uuid, str)","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":44,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/danielsgroves/Projects/so_client_orig/client/app/test_StatisticsModel.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8426be69669b9754fbd0eda4263dc264732cafa5","deserializer":"TextBuffer"},{"text":"import psutil\nfrom netifaces import interfaces, ifaddresses, AF_INET\nfrom socket import gethostname\n\n\nclass StatisticModel(object):\n    \"\"\"\n    Prepare and hold a model of system statistical data for logging. \n    \"\"\"\n    server_uuid = None\n    hostname = None\n    cpu = None\n    memory = None\n    swap = None\n    network_ip = None\n    network_io = None\n    disk_usage = None\n\n    def __init__(self, settings):\n        \"\"\"\n        Get the statistic set\n        \"\"\"\n        self.server_uuid = settings.uuid\n\n        # Hostname\n        if (settings.is_enabled('hostname')):\n            self.hostname = gethostname()\n\n        # CPU\n        if (settings.is_enabled('cpu')):\n            self.cpu = self.get_cpu()\n\n        # Memory\n        if (settings.is_enabled('memory')):\n            self.memory = self.get_memory()\n\n        # Swap\n        if (settings.is_enabled('swap')):\n            self.swap = self.get_swap()\n\n        # Disk Usage\n        if (settings.is_enabled('disk_usage')):\n            self.disk_usage = self.get_disk_usage()\n\n        # IP Addresses\n        if (settings.is_enabled('network_ip')):\n            self.network_ip = self.get_network_ip()\n\n        # Network IO data\n        if (settings.is_enabled('network_io')):\n            self.network_io = self.get_network_io()\n\n    def get_cpu(self):\n        \"\"\"\n        Get CPU load percentage for each core\n        \"\"\"\n        return psutil.cpu_percent(interval=0, percpu=True)\n\n    def get_memory(self):\n        \"\"\"\n        Get Virtual Memory statitics and load into list\n        \"\"\"\n        vmem = psutil.virtual_memory().__dict__\n        return vmem\n\n    def get_swap(self):\n        \"\"\"\n        Get Swap Memory statitics and load into list\n        \"\"\"\n        swmem = psutil.swap_memory().__dict__\n        return swmem\n\n    def get_disk_usage(self):\n        \"\"\"\n        Get the usage data for all system disks\n        \"\"\"\n        disk_usage = []\n        partitions = psutil.disk_partitions()\n\n        # Get the usage data for each partition, and add to the dictionary\n        for partition in partitions:\n            disk = []\n            disk.append(partition.__dict__)\n            disk.append(psutil.disk_usage(partition.mountpoint).__dict__)\n            disk_usage.append(disk)\n\n        return disk_usage\n\n    def get_network_ip(self):\n        \"\"\"\n        Get the IP addesses for the system\n        \"\"\"\n        network_ip = []\n\n        # Loop through each NIC\n        for interface in interfaces():\n            # Loop through all IPv4 address\n            for link in ifaddresses(interface)[AF_INET]:\n                # Append each IP to the list\n                network_ip.append(link['addr'])\n\n        return network_ip\n\n    def get_network_io(self):\n        \"\"\"\n        Get the I/O for the systems NICs\n        \"\"\"\n        return psutil.net_io_counters().__dict__\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":48,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/danielsgroves/Projects/so_client_orig/client/app/statistic_model.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b2eee473fffc4886d0582017e296e516b317cc5a","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env python\nimport requests, json, threading, sys\nfrom time import sleep\n\nfrom requests.exceptions import ConnectionError, TooManyRedirects\n\nfrom settings_model import SettingsModel\nfrom statistic_model import StatisticModel\n\n\nclass Main(object):\n    def __init__(self):\n        \"\"\"\n        Initate new settings model\n        \"\"\"\n        self.settings = SettingsModel()\n        self.update_settings()\n        self.log_cycle()\n\n    def log_cycle(self):\n        \"\"\"\n        Complete one cycle of logging system statistics, and schedule the next iteration\n        \"\"\"\n        # Schedule next update task\n        threading.Timer(self.settings.update_frequency, self.log_cycle).start()\n\n        # Try to update the settings, repeat until successful\n        self.update_settings()\n\n        # Try to push the statistics. Repeat until successful\n        statistics = self.update_statistics()\n        self.push_data(statistics)\n\n    def update_statistics(self):\n        \"\"\"\n        Build and return a new StatisticModel\n        \"\"\"\n        stats = StatisticModel(self.settings)\n        return json.dumps(stats.__dict__)\n\n    def update_settings(self):\n        \"\"\"\n        Get the latest settings from the API\n        \"\"\"\n        try:\n            authentication_header = {'Authorization': self.settings.authentication_header()}\n            r = requests.get(\"%s%s\" % (self.settings.settings_url(), self.settings.uuid), headers=authentication_header, verify=False)\n\n            if (r.status_code == 200):\n                try:\n                    feed = r.json()[0]\n                except KeyError:\n                    feed = r.json()\n\n                # Update the settings object\n                self.settings.update_frequency = feed['update_frequency']\n                self.settings.disabled_types = feed['disabled_types']\n                return True\n            return False\n        except ConnectionError as e:\n            print(\"An error occured while connecting to the remote server. Aborted. \")\n            print(e)\n            return False\n        except TooManyRedirects:\n            print(\"Too many redirects occured while attempting the contact the remote server. Aborted. \")\n            return False\n\n    def push_data(self, statistics):\n        \"\"\"\n        Send the latest data to the logging service\n        \"\"\"\n        try:\n            authentication_header = {'Authorization': self.settings.authentication_header(), 'Content-Type': 'application/json'}\n            r = requests.post(self.settings.settings_url(), headers=authentication_header, data=statistics, verify=False)\n\n            if (r.status_code == 200):\n                return True\n            else:\n                return False\n        except ConnectionError as e:\n            print(\"An error occured while connecting to the remote server. Aborted. \")\n            print(e)\n            return False\n        except TooManyRedirects:\n            print(\"Too many redirects occured while attempting the contact the remote server. Aborted. \")\n            return False\n\ntry:\n    if __name__ == \"__main__\":\n        Main()\nexcept KeyboardInterrupt:\n    print \"\\nWaiting for threads to finish...\"\n    sys.exit()\n","markers":{"markers":{"1":{"id":1,"range":[[53,0],[53,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":52,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/danielsgroves/Projects/so_client_orig/client/app/app.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9054dd564bc88b652c14c39933bd8ef354e6ecea","deserializer":"TextBuffer"},{"text":"# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  # All Vagrant configuration is done here. The most common configuration\n  # options are documented and commented below. For a complete reference,\n  # please see the online documentation at vagrantup.com.\n\n  # Every Vagrant virtual environment requires a box to build off of.\n  config.vm.box = \"hashicorp/precise64\"\n\n  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  config.vm.network \"private_network\", ip: \"dhcp\", :netmask => \"255.255.0.0\"\n\n  # If true, then any SSH connections made will enable agent forwarding.\n  # Default value: false\n  config.ssh.forward_agent = true\n\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  config.vm.synced_folder \"./client\", \"/home/vagrant/client\"\n\n  # Install required software, dependencies and configurations on the\n  # virtual machine using a provisioner.\n  config.vm.provision \"ansible\" do |ansible|\n    ansible.playbook = \"provisioner/vagrant.yml\"\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[16,2],[16,2]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":58,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/danielsgroves/Projects/so_client_orig/Vagrantfile","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1af3f83ff84d6bc3fb2ea17c0b36e3795ec7569c","deserializer":"TextBuffer"},{"text":"import pytest, re, uuid\n\nfrom settings_model import SettingsModel\n\nclass TestClass:\n    @classmethod\n    def setup_class(self):\n        # Create tests settings\n        self.settings = SettingsModel()\n        self.settings.update_freqency = 30\n        self.settings.disabled_types = [{'api_name': 'memory', 'type_name': 'Memory'}, {'api_name': 'network_io', 'type_name': 'Network I/O'}, {'api_name': 'network_ip', 'type_name': 'Network IP'}]\n\n        self.settings.request_url = \"172.28.128.2\"\n        self.settings.request_port = \"8080\"\n        self.settings.request_location = \"log_api/\"\n\n    def test_is_enabled(self):\n        \"\"\"\n        Ensure that the correct response is returned when checking what log log types\n        are enabled.\n        \"\"\"\n        assert self.settings.is_enabled('cpu') == True\n        assert self.settings.is_enabled('memory') == False\n        assert self.settings.is_enabled('network_io') == False\n        assert self.settings.is_enabled('network_ip') == False\n\n    def test_settings_url(self):\n        assert self.settings.settings_url() == \"http://172.28.128.2:8080/log_api/\"\n\n    def test_authtication_header(self):\n        self.settings.authentication_token = \"6e29b97b910dcaf97ef1bf4b6389f131316bbd5d\"\n        assert self.settings.authentication_header() == \"Token 6e29b97b910dcaf97ef1bf4b6389f131316bbd5d\"\n\n    def test_generate_uuid(self):\n        validator = re.compile('[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15}\\Z', re.I)\n        the_uuid = self.settings.generate_uuid()\n        \n        try:\n            uuid.UUID(the_uuid)\n            assert True\n        except ValueError:\n            assert False\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":90},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/danielsgroves/Projects/so_client_orig/client/app/test_SettingsModel.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7c8d36dc3ae46c41b1b80689041e48ccd0129953","deserializer":"TextBuffer"},{"text":"\u0003�\r\n�ÌSc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000@\u0000\u0000\u0000sR\u0000\u0000\u0000d\u0000\u0000d\u0001\u0000l\u0000\u0000Z\u0000\u0000d\u0000\u0000d\u0002\u0000l\u0001\u0000m\u0002\u0000Z\u0002\u0000m\u0003\u0000Z\u0003\u0000m\u0004\u0000Z\u0004\u0000\u0001d\u0000\u0000d\u0003\u0000l\u0005\u0000m\u0006\u0000Z\u0006\u0000\u0001d\u0004\u0000e\u0007\u0000f\u0001\u0000d\u0005\u0000�\u0000\u0000�\u0000\u0000YZ\b\u0000d\u0001\u0000S(\u0006\u0000\u0000\u0000i����N(\u0003\u0000\u0000\u0000t\n\u0000\u0000\u0000interfacest\u000b\u0000\u0000\u0000ifaddressest\u0007\u0000\u0000\u0000AF_INET(\u0001\u0000\u0000\u0000t\u000b\u0000\u0000\u0000gethostnamet\u000e\u0000\u0000\u0000StatisticModelc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000B\u0000\u0000\u0000s}\u0000\u0000\u0000e\u0000\u0000Z\u0001\u0000d\u0000\u0000Z\u0002\u0000d\b\u0000Z\u0004\u0000d\b\u0000Z\u0005\u0000d\b\u0000Z\u0006\u0000d\b\u0000Z\u0007\u0000d\b\u0000Z\b\u0000d\b\u0000Z\t\u0000d\b\u0000Z\n\u0000d\b\u0000Z\u000b\u0000d\u0001\u0000�\u0000\u0000Z\f\u0000d\u0002\u0000�\u0000\u0000Z\r\u0000d\u0003\u0000�\u0000\u0000Z\u000e\u0000d\u0004\u0000�\u0000\u0000Z\u000f\u0000d\u0005\u0000�\u0000\u0000Z\u0010\u0000d\u0006\u0000�\u0000\u0000Z\u0011\u0000d\u0007\u0000�\u0000\u0000Z\u0012\u0000RS(\t\u0000\u0000\u0000sK\u0000\u0000\u0000\n    Prepare and hold a model of system statistical data for logging. \n    c\u0002\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0002\u0000\u0000\u0000C\u0000\u0000\u0000s�\u0000\u0000\u0000|\u0001\u0000j\u0000\u0000|\u0000\u0000_\u0001\u0000|\u0001\u0000j\u0002\u0000d\u0001\u0000�\u0001\u0000r*\u0000t\u0003\u0000�\u0000\u0000|\u0000\u0000_\u0004\u0000n\u0000\u0000|\u0001\u0000j\u0002\u0000d\u0002\u0000�\u0001\u0000rK\u0000|\u0000\u0000j\u0005\u0000�\u0000\u0000|\u0000\u0000_\u0006\u0000n\u0000\u0000|\u0001\u0000j\u0002\u0000d\u0003\u0000�\u0001\u0000rl\u0000|\u0000\u0000j\u0007\u0000�\u0000\u0000|\u0000\u0000_\b\u0000n\u0000\u0000|\u0001\u0000j\u0002\u0000d\u0004\u0000�\u0001\u0000r�\u0000|\u0000\u0000j\t\u0000�\u0000\u0000|\u0000\u0000_\n\u0000n\u0000\u0000|\u0001\u0000j\u0002\u0000d\u0005\u0000�\u0001\u0000r�\u0000|\u0000\u0000j\u000b\u0000�\u0000\u0000|\u0000\u0000_\f\u0000n\u0000\u0000|\u0001\u0000j\u0002\u0000d\u0006\u0000�\u0001\u0000r�\u0000|\u0000\u0000j\r\u0000�\u0000\u0000|\u0000\u0000_\u000e\u0000n\u0000\u0000|\u0001\u0000j\u0002\u0000d\u0007\u0000�\u0001\u0000r�\u0000|\u0000\u0000j\u000f\u0000�\u0000\u0000|\u0000\u0000_\u0010\u0000n\u0000\u0000d\b\u0000S(\t\u0000\u0000\u0000s'\u0000\u0000\u0000\n        Get the statistic set\n        t\b\u0000\u0000\u0000hostnamet\u0003\u0000\u0000\u0000cput\u0006\u0000\u0000\u0000memoryt\u0004\u0000\u0000\u0000swapt\n\u0000\u0000\u0000disk_usaget\n\u0000\u0000\u0000network_ipt\n\u0000\u0000\u0000network_ioN(\u0011\u0000\u0000\u0000t\u0004\u0000\u0000\u0000uuidt\u000b\u0000\u0000\u0000server_uuidt\n\u0000\u0000\u0000is_enabledR\u0003\u0000\u0000\u0000R\u0005\u0000\u0000\u0000t\u0007\u0000\u0000\u0000get_cpuR\u0006\u0000\u0000\u0000t\n\u0000\u0000\u0000get_memoryR\u0007\u0000\u0000\u0000t\b\u0000\u0000\u0000get_swapR\b\u0000\u0000\u0000t\u000e\u0000\u0000\u0000get_disk_usageR\t\u0000\u0000\u0000t\u000e\u0000\u0000\u0000get_network_ipR\n\u0000\u0000\u0000t\u000e\u0000\u0000\u0000get_network_ioR\u000b\u0000\u0000\u0000(\u0002\u0000\u0000\u0000t\u0004\u0000\u0000\u0000selft\b\u0000\u0000\u0000settings(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyt\b\u0000\u0000\u0000__init__\u0013\u0000\u0000\u0000s\u001e\u0000\u0000\u0000\u0000\u0004\f\u0003\u000f\u0001\u000f\u0003\u000f\u0001\u0012\u0003\u000f\u0001\u0012\u0003\u000f\u0001\u0012\u0003\u000f\u0001\u0012\u0003\u000f\u0001\u0012\u0003\u000f\u0001c\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000C\u0000\u0000\u0000s\u0016\u0000\u0000\u0000t\u0000\u0000j\u0001\u0000d\u0001\u0000d\u0002\u0000d\u0003\u0000t\u0002\u0000�\u0000\u0002S(\u0004\u0000\u0000\u0000s7\u0000\u0000\u0000\n        Get CPU load percentage for each core\n        t\b\u0000\u0000\u0000intervali\u0000\u0000\u0000\u0000t\u0006\u0000\u0000\u0000percpu(\u0003\u0000\u0000\u0000t\u0006\u0000\u0000\u0000psutilt\u000b\u0000\u0000\u0000cpu_percentt\u0004\u0000\u0000\u0000True(\u0001\u0000\u0000\u0000R\u0015\u0000\u0000\u0000(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyR\u000f\u0000\u0000\u00005\u0000\u0000\u0000s\u0002\u0000\u0000\u0000\u0000\u0004c\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000s\u0013\u0000\u0000\u0000t\u0000\u0000j\u0001\u0000�\u0000\u0000j\u0002\u0000}\u0001\u0000|\u0001\u0000S(\u0001\u0000\u0000\u0000sA\u0000\u0000\u0000\n        Get Virtual Memory statitics and load into list\n        (\u0003\u0000\u0000\u0000R\u001a\u0000\u0000\u0000t\u000e\u0000\u0000\u0000virtual_memoryt\b\u0000\u0000\u0000__dict__(\u0002\u0000\u0000\u0000R\u0015\u0000\u0000\u0000t\u0004\u0000\u0000\u0000vmem(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyR\u0010\u0000\u0000\u0000;\u0000\u0000\u0000s\u0004\u0000\u0000\u0000\u0000\u0004\u000f\u0001c\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000s\u0013\u0000\u0000\u0000t\u0000\u0000j\u0001\u0000�\u0000\u0000j\u0002\u0000}\u0001\u0000|\u0001\u0000S(\u0001\u0000\u0000\u0000s>\u0000\u0000\u0000\n        Get Swap Memory statitics and load into list\n        (\u0003\u0000\u0000\u0000R\u001a\u0000\u0000\u0000t\u000b\u0000\u0000\u0000swap_memoryR\u001e\u0000\u0000\u0000(\u0002\u0000\u0000\u0000R\u0015\u0000\u0000\u0000t\u0005\u0000\u0000\u0000swmem(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyR\u0011\u0000\u0000\u0000B\u0000\u0000\u0000s\u0004\u0000\u0000\u0000\u0000\u0004\u000f\u0001c\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0004\u0000\u0000\u0000C\u0000\u0000\u0000sf\u0000\u0000\u0000g\u0000\u0000}\u0001\u0000t\u0000\u0000j\u0001\u0000�\u0000\u0000}\u0002\u0000xM\u0000|\u0002\u0000D]E\u0000}\u0003\u0000g\u0000\u0000}\u0004\u0000|\u0004\u0000j\u0002\u0000|\u0003\u0000j\u0003\u0000�\u0001\u0000\u0001|\u0004\u0000j\u0002\u0000t\u0000\u0000j\u0004\u0000|\u0003\u0000j\u0005\u0000�\u0001\u0000j\u0003\u0000�\u0001\u0000\u0001|\u0001\u0000j\u0002\u0000|\u0004\u0000�\u0001\u0000\u0001q\u0019\u0000W|\u0001\u0000S(\u0001\u0000\u0000\u0000s9\u0000\u0000\u0000\n        Get the usage data for all system disks\n        (\u0006\u0000\u0000\u0000R\u001a\u0000\u0000\u0000t\u000f\u0000\u0000\u0000disk_partitionst\u0006\u0000\u0000\u0000appendR\u001e\u0000\u0000\u0000R\t\u0000\u0000\u0000t\n\u0000\u0000\u0000mountpoint(\u0005\u0000\u0000\u0000R\u0015\u0000\u0000\u0000R\t\u0000\u0000\u0000t\n\u0000\u0000\u0000partitionst\t\u0000\u0000\u0000partitiont\u0004\u0000\u0000\u0000disk(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyR\u0012\u0000\u0000\u0000I\u0000\u0000\u0000s\u0010\u0000\u0000\u0000\u0000\u0004\u0006\u0001\f\u0003\r\u0001\u0006\u0001\u0010\u0001\u001c\u0001\u0011\u0002c\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0005\u0000\u0000\u0000C\u0000\u0000\u0000sJ\u0000\u0000\u0000g\u0000\u0000}\u0001\u0000x=\u0000t\u0000\u0000�\u0000\u0000D]2\u0000}\u0002\u0000x)\u0000t\u0001\u0000|\u0002\u0000�\u0001\u0000t\u0002\u0000\u0019D]\u0017\u0000}\u0003\u0000|\u0001\u0000j\u0003\u0000|\u0003\u0000d\u0001\u0000\u0019�\u0001\u0000\u0001q'\u0000Wq\u0010\u0000W|\u0001\u0000S(\u0002\u0000\u0000\u0000s4\u0000\u0000\u0000\n        Get the IP addesses for the system\n        t\u0004\u0000\u0000\u0000addr(\u0004\u0000\u0000\u0000R\u0000\u0000\u0000\u0000R\u0001\u0000\u0000\u0000R\u0002\u0000\u0000\u0000R#\u0000\u0000\u0000(\u0004\u0000\u0000\u0000R\u0015\u0000\u0000\u0000R\n\u0000\u0000\u0000t\t\u0000\u0000\u0000interfacet\u0004\u0000\u0000\u0000link(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyR\u0013\u0000\u0000\u0000Y\u0000\u0000\u0000s\n\u0000\u0000\u0000\u0000\u0004\u0006\u0003\u0010\u0002\u0017\u0002\u0019\u0002c\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0000C\u0000\u0000\u0000s\r\u0000\u0000\u0000t\u0000\u0000j\u0001\u0000�\u0000\u0000j\u0002\u0000S(\u0001\u0000\u0000\u0000s2\u0000\u0000\u0000\n        Get the I/O for the systems NICs\n        (\u0003\u0000\u0000\u0000R\u001a\u0000\u0000\u0000t\u000f\u0000\u0000\u0000net_io_countersR\u001e\u0000\u0000\u0000(\u0001\u0000\u0000\u0000R\u0015\u0000\u0000\u0000(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyR\u0014\u0000\u0000\u0000h\u0000\u0000\u0000s\u0002\u0000\u0000\u0000\u0000\u0004N(\u0013\u0000\u0000\u0000t\b\u0000\u0000\u0000__name__t\n\u0000\u0000\u0000__module__t\u0007\u0000\u0000\u0000__doc__t\u0004\u0000\u0000\u0000NoneR\r\u0000\u0000\u0000R\u0005\u0000\u0000\u0000R\u0006\u0000\u0000\u0000R\u0007\u0000\u0000\u0000R\b\u0000\u0000\u0000R\n\u0000\u0000\u0000R\u000b\u0000\u0000\u0000R\t\u0000\u0000\u0000R\u0017\u0000\u0000\u0000R\u000f\u0000\u0000\u0000R\u0010\u0000\u0000\u0000R\u0011\u0000\u0000\u0000R\u0012\u0000\u0000\u0000R\u0013\u0000\u0000\u0000R\u0014\u0000\u0000\u0000(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyR\u0004\u0000\u0000\u0000\u0006\u0000\u0000\u0000s \u0000\u0000\u0000\u0006\u0003\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0002\t\"\t\u0006\t\u0007\t\u0007\t\u0010\t\u000f(\t\u0000\u0000\u0000R\u001a\u0000\u0000\u0000t\t\u0000\u0000\u0000netifacesR\u0000\u0000\u0000\u0000R\u0001\u0000\u0000\u0000R\u0002\u0000\u0000\u0000t\u0006\u0000\u0000\u0000socketR\u0003\u0000\u0000\u0000t\u0006\u0000\u0000\u0000objectR\u0004\u0000\u0000\u0000(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u0000s+\u0000\u0000\u0000/home/vagrant/client/app/statistic_model.pyt\b\u0000\u0000\u0000<module>\u0001\u0000\u0000\u0000s\u0006\u0000\u0000\u0000\f\u0001\u001c\u0001\u0010\u0003","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":94},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/danielsgroves/Projects/so_client_orig/client/app/statistic_model.pyc","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"25c50bb5d27105c512433de89c25557aab093774","deserializer":"TextBuffer"},{"text":"import uuid, ConfigParser, os, sys\n\nclass SettingsModel(object):\n    \"\"\"\n    Hold settings for system interactions, authentication and data gathering\n    \"\"\"\n    authentication_token = None\n    uuid = None\n\n    update_frequency = None\n    disabled_types = None\n\n    def __init__(self):\n        if os.environ.get('SO_LOCAL_TESTING_SERVER') == 'local':\n            self.request_protocol = 'http'\n            self.request_url = '172.28.128.2'\n            self.request_port = '8080'\n            self.request_location = 'log_api/'\n            self.settings_file = './ServerObserver.cfg'\n            print self.settings_url()\n        elif os.environ.get('SO_LOCAL_TESTING_SERVER') == 'local-production':\n            self.request_protocol = 'https'\n            self.request_url = 'serverapp.io'\n            self.request_port = '443'\n            self.request_location = 'log_api/'\n            self.settings_file = './ServerObserver.cfg'\n            print self.settings_url()\n        else:\n            self.request_protocol = 'https'\n            self.request_url = 'serverapp.io'\n            self.request_port = '443'\n            self.request_location = 'log_api/'\n            self.settings_file = '/etc/ServerObserver.cfg'\n\n        self.load()\n\n    def authentication_header(self):\n        \"\"\"\n        Generate an authentication header witht he users token\n        \"\"\"\n        return \"Token {0}\".format(self.authentication_token)\n\n    def settings_url(self):\n        \"\"\"\n        Generate the correct URL path to query for the settings\n        \"\"\"\n        return \"{0}://{1}:{2}/{3}\".format(self.request_protocol, self.request_url, self.request_port, self.request_location)\n\n    def is_enabled(self, log_type):\n        \"\"\"\n        Check if an item is in the disabled list. \n        Return False if they are, True if they are not\n        \"\"\"\n        try:\n            for i, disabled_type in enumerate(self.disabled_types):\n                if (disabled_type['api_name'] == log_type):\n                    return False\n            return True\n        except TypeError:\n            return True\n\n    def generate_uuid(self):\n        \"\"\"\n        Generate a unique identifyer for the server\n        \"\"\"\n        return str(uuid.uuid4())\n\n    def save(self):\n        \"\"\"\n        Save the settings to disk\n        \"\"\"\n        # Build a new config file\n        config = ConfigParser.RawConfigParser()\n        config.add_section('Authentication')\n        config.set('Authentication', 'Token', self.authentication_token)\n        config.set('Authentication', 'UUID', self.uuid)\n\n        # Save the config to disk\n        with open(self.settings_file, 'wb') as configfile:\n            config.write(configfile)\n\n    def load(self):\n        \"\"\"\n        Load the configuation into the settings\n        \"\"\"\n        # So we know if any settings have been changed\n        change = False\n\n        # Load the config file\n        config = ConfigParser.RawConfigParser()\n        config.read(self.settings_file)\n\n        # Load or prompt for token\n        try:\n            self.authentication_token = config.get('Authentication', 'Token')\n        except (ConfigParser.NoOptionError, ConfigParser.NoSectionError):\n            change = True\n            self.authentication_token = self.request_authentication_token()\n\n        # Load and validate or generate UUID\n        try:\n            self.uuid = config.get('Authentication', 'UUID')\n            uuid.UUID(self.uuid)\n        except (ConfigParser.NoOptionError, ConfigParser.NoSectionError, ValueError):\n            change = True\n            self.uuid = self.generate_uuid()\n\n        # If any changes have been made, save them\n        try:\n            if change:\n                self.save()\n        except IOError:\n            print \"You are trying to run ServerObserver as a non-root user. Please try again as root. \"\n            sys.exit()\n\n    def request_authentication_token(self):\n        \"\"\"\n        Prompt the user to input their authentication token\n        \"\"\"\n        try:\n            token = raw_input(\"Authentication Token: \")\n        except EOFError:\n            try:\n                token = raw_input(\"\\nSorry, an error occured. Please try again. \\nAuthentication Token: \")\n            except:\n                print \"\\nSorry, we can't read your keyboard input. Please refer to the documentation for how to manually write your configuration file. \"\n                sys.exit()\n        except IOError:\n            # Only seems that CI can throw this as it cannot take keyboard input. \n            # Return none stops tests failing as a result, but we print an error message just in case. \n            print \"\\nSorry, we can't read your keyboard input. Please refer to the documentation for how to manually write your configuration file. Use Ctrl^C to stop the process. \"\n            return None\n\n        return token\n","markers":{"markers":{"1":{"id":1,"range":[[13,27],[13,50]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":98,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/danielsgroves/Projects/so_client_orig/client/app/settings_model.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4ea73d3191b1c2e510f46a84aaaa21ea7a1c965d","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":44,"softTabs":true,"displayBuffer":{"id":45,"softWrap":false,"editorWidthInChars":133,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/danielsgroves/Projects/so_client_orig/client/app/test_StatisticsModel.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":52,"softTabs":true,"displayBuffer":{"id":53,"softWrap":false,"editorWidthInChars":133,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/danielsgroves/Projects/so_client_orig/client/app/app.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":90,"softTabs":true,"displayBuffer":{"id":91,"softWrap":false,"editorWidthInChars":133,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/danielsgroves/Projects/so_client_orig/client/app/test_SettingsModel.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":94,"softTabs":true,"displayBuffer":{"id":95,"softWrap":false,"editorWidthInChars":133,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/danielsgroves/Projects/so_client_orig/client/app/statistic_model.pyc","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":58,"softTabs":true,"displayBuffer":{"id":59,"softWrap":false,"editorWidthInChars":129,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/danielsgroves/Projects/so_client_orig/Vagrantfile","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":48,"softTabs":true,"displayBuffer":{"id":49,"softWrap":false,"editorWidthInChars":133,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/danielsgroves/Projects/so_client_orig/client/app/statistic_model.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":98,"softTabs":true,"displayBuffer":{"id":99,"softWrap":false,"editorWidthInChars":133,"scrollTop":0,"scrollLeft":3,"tokenizedBuffer":{"bufferPath":"/Users/danielsgroves/Projects/so_client_orig/client/app/settings_model.py","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/danielsgroves/Projects/so_client_orig/client/app/app.py","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-python","language-ruby"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":["except"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/danielsgroves/Projects/so_client_orig/client/app/test_StatisticsModel.py":1404932264611,"/Users/danielsgroves/Projects/so_client_orig/client/app/app.py":1405357461815,"/Users/danielsgroves/Projects/so_client_orig/client/app/test_SettingsModel.py":1405293323959,"/Users/danielsgroves/Projects/so_client_orig/client/app/statistic_model.pyc":1405293324815,"/Users/danielsgroves/Projects/so_client_orig/Vagrantfile":1405267079105,"/Users/danielsgroves/Projects/so_client_orig/client/app/statistic_model.py":1405293325373,"/Users/danielsgroves/Projects/so_client_orig/client/app/settings_model.py":1405293326667},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":163008403},"tree-view":{"directoryExpansionStates":{"client":{"app":{}}},"selectedPath":"/Users/danielsgroves/Projects/so_client_orig/client/app/app.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}